use types::int;
use types::uuid;
use types::slice;
use types::hdl;
use types::option;
use types::sysresult;

struct ExceptionContextHandle opaque(Handle);

struct ExceptionStatusInfo {
    except_code: Uuid,
    except_info: u64,
    except_reason: u64,
}

struct ExceptionInfo {
    status: ExceptionStatusInfo,
    except_sys_used: *mut void,
    last_exception_info: *const ExceptionInfo,
    except_data_ref: *mut void,
    except_data_size: ulong,
    trigger_code_addr: *mut void,
    trigger_code_stack_head: *mut void,
}

struct ExceptHandlerOptionSetStack : option(U{c930f494-695a-5f0f-b9ec-b95dbf61fa44}) {
    /// The header
    head: ExtendedOptionHead,
    /// The stack pointer to set when execution the exception handler
    stack_base_addr: *mut void,
}

union ExceptHandlerOption : option_body(64) {
    set_stack: ExceptHandlerOptionSetStack,
}

type ExceptHandler =
    fn(*mut ExceptionInfo, *handle ExceptionContextHandle) -> !;


/// Aborts the calling thread by reporting  `except` as having been recieved but not handled
///
///
/// ## Default Behaviour
///
/// Except for certain exceptions, which are specially recognized by the kernel to do something else,
/// If no [`ExceptHandler`] is installed (or calling the [`ExceptHandler`] triggers an exception) when a thread recieves an exception,
///  the thread is terminated in the same manner as calling [`UnmanagedException`].
fn UnmanagedException(except: *const ExceptionStatusInfo) -> ! = 0x40;

/// Installs or removes the kernel exception handler
fn ExceptInstallHandler(
    except_handler: ExceptHandler,
    opts: *const KCSlice<ExceptHandlerOption>,
) -> SysResult = 0x41;
fn ExceptHandleSynchronous(
    ptr: *const ExceptionStatusInfo,
    data: *const void,
) -> SysResult = 0x42;
fn ExceptRaiseAsynchronous(
    hdl: *handle ThreadHandle,
    ptr: *const ExceptionStatusInfo,
    data: *const void,
    data_sz: ulong,
) -> SysResult = 0x43;

/// Load all registers from the given context (which is then released) and resumes execution at `code_addr`
fn ExceptResumeAt(
    code_addr: *mut void,
    ctx: *handle ExceptionContextHandle,
) -> SysResult = 0x44;

/// Sets a register in the context. The value is the same size as a machine word
/// regno is the same as for [`DebugWriteRegister`][super::debug::DebugWriteRegister]. Debug and Task registers cannot be modified.
///
/// Despite the name, regno is not limited to registers considered "General Purpose" on the architecture. Rather, GPR refers to the size of the value (at most the word size),
/// as thevalue of the register is passed inline.
fn ExceptSetGPR(
    ctx: *handle ExceptionContextHandle,
    regno: u32,
    value: ulong,
) -> SysResult = 0x45;

/// Sets a register in the context to the value of a pointer. The value is the same size as a machine word
/// regno is the same as for [`DebugWriteRegister`][super::debug::DebugWriteRegister]. Debug and Task registers cannot be modified.
///
/// `value` is the value itself, represented as a pointer. It is not read or written to by this function.
/// [`INVALID_MEMORY`][crate::sys::result::errors::INVALID_MEMORY] is not returned by this function.
fn ExceptSetPointerReg(
    ctx: *handle ExceptionContextHandle,
    regno: u32,
    value: *mut void,
) -> SysResult = 0x46;

/// Sets a register in the context.
/// regno is the same as for [`DebugWriteRegister`][super::debug::DebugWriteRegister]. Debug and Task registers cannot be modified.
/// `size` is the size of `value` in bytes, `value` points to that many bytes to read the register from. Valid sizes depend on `regno` and the architecture
fn ExceptSetRegister(
    ctx: *handle ExceptionContextHandle,
    regno: u32,
    value: *const void,
    size: ulong,
) -> SysResult = 0x47;

fn ExceptGetStopAddr(
    ctx: *handle ExceptionContextHandle,
    value: *mut *mut void,
) -> SysResult = 0x48;

/// Sets a register in the context.
/// regno is the same as for [`DebugWriteRegister`][super::debug::DebugWriteRegister]. Debug and Task registers cannot be modified.
/// `size` is the size of `value` in bytes, `value` points to that many bytes to read the register from. Valid sizes depend on `regno` and the architecture
fn ExceptGetRegister(
    ctx: *handle ExceptionContextHandle,
    regno: u32,
    value: *mut void,
    size: ulong,
) -> SysResult = 0x49;