use types::hdl;
use types::int;
use types::sysresult;
use types::option;
use types::str;
use types::sysresult;

const OPTION_FLAG_SYSINFO_FORCE_IGNORE: u32 = 0x1000;

/// Standard request for querying information about the OS.
/// This request should be 
struct SysInfoRequestOsVersion : option(U{22c479ab-c119-58d5-9c1e-fa03ddf9426a}) {
    head: ExtendedOptionHead,
    os_name: KStrPtr,
    /// The Major Version of the OS
    os_major: u32,
    /// The Minor Version of the OS
    os_minor: u32,
} 


union ProcInfoRequest : option_body(64, __LILIUM_SIZEOF_POINTER__ * 8) {}

/// Requests Kernel Vendor Name

struct SysInfoRequestKernelVendor : option(U{01adbfd8-3b43-5115-9abd-5b2974375358}) {
    /// The Header of the request
    head: ExtendedOptionHead,
    /// The name of the kernel vendor
    kvendor_name: KStrPtr,
    /// The kernel build id
    build_id: Uuid,
    /// The major kernel version
    kernel_major: u32,
    /// The minor kernel version
    kernel_minor: u32,
}

/// Queries whether a given subsystem and properties about it
/// This is a polymorphic request and has no fixed ID. The ID of the request is the ID of the subsystem to query,
/// Provided by either the SCI Documentation or by the vendor of the third-party/extension module
struct SysInfoRequestSupportedSubsystem {
    /// The Header of the request
    head: ExtendedOptionHead,
    /// The version of the subsystem.
    /// The exact value of this depends on the subsystem queried.
    subsys_version: u64,

    /// The number of the subsystem for this supported subsystem.
    ///
    /// The base number for syscalls is this number `<<12`, and the base number for error numbers is this number `<<8`, and negated.
    subsystem_no: u16,
    /// The maximum syscall number supported (within the syscall region allocated to the subsystem)
    ///
    /// Note that it is not guaranteed that every syscall in the allocated region will be supported by the subsystem
    max_sysno: u16,
}


struct SysInfoRequestPhysicalInfo : option(U{f5601b29-da4a-5db7-b37f-b2518bbce903}) {
    /// The header of the request
    head: ExtendedOptionHead,
    /// The number of physical cores accross all active processors
    physical_core_count: u32,
    /// The number of logical cores (threads)
    /// May be different if the processor supports hyperthreading or shared-state parallelism
    logical_core_count: u32,
    /// The number of physically installed discrete Processors
    discrete_processor_count: u32,
}

struct SysInfoRequestArchInfo : option(U{416eed18-85ca-53c9-849f-4b54bb0568b7}) {
    /// The Header of the request
    head: ExtendedOptionHead,
    /// The type of the architecture
    arch_type: Uuid,
    /// The architecture version.
    ///
    /// This is a generic version, intended to differentiate between similar targets sharing the same arch (IE. i386 vs. i686, or ABI microarchitecture versions of x86_64).
    /// This may be different from vendor-specific processor versions.
    arch_version: u32,
}

struct SysInfoRequestComputerName : option(U{82b314fe-0476-51ca-99de-bbd9711403cf}) {
    /// The header of the request
    head: ExtendedOptionHead,
    /// The system host name
    hostname: KStrPtr,
    /// The system unique identifier
    sys_id: Uuid,
    /// The System Display Name
    sys_display_name: KStrPtr,
    /// The System Label
    sys_label: KStrPtr,
}


struct SysInfoRequestAddressSpace : option(U{5e803334-00e2-50d1-ad23-7a7242ac1f20}) {
    /// The header of the request
    head: ExtendedOptionHead,
    /// The Minimum Virtual address that a userspace program can allocate,
    min_mapping_addr: ulong,
    /// The Maximum Virtual Address that a userspace program can allocate
    max_mapping_addr: ulong,
    /// The Page Granularity
    page_size: ulong,
}

union SysInfoRequest : option_body(64, __LILIUM_SIZEOF_POINTER__ * 8) {
    /// Querries some (though not all) processor information requests at the global-level
    common_proc_info: ProcInfoRequest,
    /// Specifies the verison of the OS. Usually supposed to be overriden by the USI impl
    os_version: SysInfoRequestOsVersion,
    kernel_vendor: SysInfoRequestKernelVendor,
    computer_name: SysInfoRequestComputerName,
    physical_info: SysInfoRequestPhysicalInfo,
    addr_space: SysInfoRequestAddressSpace,
    arch_info: SysInfoRequestArchInfo,
}


/// Obtains information about the System (OS, Kernel, or CPU).
/// Each information request is provided as a [`SysInfoRequest`]. The caller is responsibile for initializing the header of the request,
///  and if the request is recongized, the fields of the request are set by the kernel.
///
/// If any request is not recognized, it is ignored if the [`OPTION_FLAG_IGNORE`][super::option::OPTION_FLAG_IGNORE] flag is set in the header, otherwise, an error is returned.
/// If an [`OPTION_FLAG_IGNORE`][super::option::OPTION_FLAG_IGNORE] request is fulfilled, that flag is cleared in the header by the kernel.
///
/// The following info requests are guaranteed to be supported:
/// * [`SYSINFO_REQUEST_OSVER`] - requests Operating System Version Information
/// * [`SYSINFO_REQUEST_KVENDOR`] - requests Vendor information about the Kernel build
/// * [`SYSINFO_REQUEST_ARCH_INFO`] - requests general processor architecture information
///
/// ## [`GetProcessorInfo`]
/// [`GetSystemInfo`] can be used to make information requests supported by [`GetProcessorInfo`].
/// Only some [`ProcInfoRequest`]s are supported in this manner and on a multicore system
///
/// ## `INVALID_LENGTH`` strings
///
/// Special behaviour is guaranteed for [`GetSystemInfo`] and [`GetProcessorInfo`] with [`KStrPtr`]s embedded in a request.
/// Before returning `INVALID_LENGTH` as a result of a `KStrPtr` field having an insufficient length, the following is guaranteed to hold:
/// * All other `KStrPtr`s in the same request will be fulfilled (written up to capacity with the total length put in the `len` field),
/// * All fields that don't contain either a `KStrPtr` or a `KSlice` are guaranteed to be filled,
///
/// This allows for requests that may return multiple strings (such as [`SYSINFO_REQUEST_COMPUTER_NAME`]) to be used to only fill one string, or to read all direct values.
///
fn GetSystemInfo(reqs: KSlice<SysInfoRequest>) -> SysResult = 0x30;

/// Obtains information about a specific processor on the system
fn GetProcessorInfo(proc_id: u32, reqs: KSlice<ProcInfoRequest>) -> SysResult = 0x31;