
use types::hdl;
use types::int;
use types::sysresult;
use types::uuid;
use types::str;
use types::slice;

use thread::hdl;
use process::hdl;

struct SecurityContextHandle : opaque(Handle);

union ThreadOwner : {
    hdl: WideHandle<ProcessHandle>,
    principal: Uuid,
} 

fn CreateSecurityContext(nctx: *mut *handle SecurityContext) -> SysResult = 16;
fn CopySecurityContext(
    nctx: *mut *handle SecurityContext,
    ctx: *handle SecurityContext,
) -> SysResult = 17;
fn DestroySecurityContext(ctx: *handle SecurityContext) -> SysResult = 18;
fn GetCurrentSecurityContext(nctx: *mut *handle SecurityContext) -> SysResult = 19;
fn HasKernelPermission(ctx: *handle SecurityContext, perm: KStrCPtr) -> SysResult = 20;
fn HasThreadPermission(
    ctx: *handle SecurityContext,
    th: *handle ThreadHandle,
    perm: KStrCPtr,
) -> SysResult = 21;
fn HasProcessPermission(
    ctx: *handle SecurityContext,
    ph: *handle ProcessHandle,
    perm: KStrCPtr,
) -> SysResult = 22;

/// Sets the primary principal of the security context.
///
/// ## Permission Check
///
/// ctx must have principal as one of it's principals (either an explicit primary or an explicit secondary principal), or the thread must have the kernel permission SECURITY_SET_CREDENTIAL.
fn SetPrimaryPrincipal(ctx: *handle SecurityContext, principal: *const Uuid) -> SysResult = 23;

fn AddSecondaryPrincipal(ctx: *handle SecurityContext, principal: *const Uuid) -> SysResult = 24;

fn GrantKernelPermission(
    ctx: *handle SecurityContext,
    perm: KStrCPtr,
    status: c_long,
) -> SysResult = 25;
fn GrantThreadPermission(
    ctx: *handle SecurityContext,
    th: *handle ThreadHandle,
    perm: KStrCPtr,
    status: c_long,
) -> SysResult = 26;
fn GrantProcessPermission(
    ctx: *handle SecurityContext,
    ph: *handle ProcessHandle,
    perm: KStrCPtr,
    status: c_long,
) -> SysResult = 27;
fn DropKernelPermission(
    ctx: *handle SecurityContext,
    perm: KStrCPtr,
    status: c_long,
) -> SysResult = 28;
fn DropThreadPermission(
    ctx: *handle SecurityContext,
    th: *handle ThreadHandle,
    perm: KStrCPtr,
    status: c_long,
) -> SysResult = 29;
fn DropProcessPermission(
    ctx: *handle SecurityContext,
    ph: *handle ProcessHandle,
    perm: KStrCPtr,
    status: c_long,
) -> SysResult = 30;
fn RevokeKernelPermission(ctx: *handle SecurityContext, perm: KStrCPtr) -> SysResult = 31;
fn RevokeThreadPermission(
    ctx: *handle SecurityContext,
    th: *handle ThreadHandle,
    perm: KStrCPtr,
) -> SysResult = 32;
fn RevokeProcessPermission(
    ctx: *handle SecurityContext,
    ph: *handle ProcessHandle,
    perm: KStrCPtr,
) -> SysResult = 33;

fn SetKernelResourceLimit(
    ctx: *handle SecurityContext,
    limit_name: KStrCPtr,
    value: u64,
) -> SysResult = 34;

/// Gets the value of limit on a kernel (global) resource in the given security context. Note that this is the maximum value for the limit, not the current in-use value.
/// The Debug API can provide some of this information.
///
/// ### Known resource limits
///
/// The set of resource Limits supported is kernel dependant.
/// The following resource limit names are defined:
/// * `Memory`: Total virtual memory allocated for process/thread mappings
/// * `PhysMem`: Total physical memory allocated for process/thread mappings
/// * `KMemory`: Total virtual memory allocated
fn GetKernelResourceLimit(
    ctx: *handle SecurityContext,
    limit_name: KStrCPtr,
    value: *mut u64,
) -> SysResult = 35;

fn EncodeSecurityContext(
    ctx: *handle SecurityContext,
    buffer: *mut u8,
    len: *mut ulong,
) -> SysResult = 36;

fn GetPrimaryPrincipal(ctx: *handle SecurityContext, principal: *mut Uuid) -> SysResult = 37;
fn GetSecondaryPrincipals(
    ctx: *handle SecurityContext,
    principals: *mut KSlice<Uuid>,
) -> SysResult = 38;