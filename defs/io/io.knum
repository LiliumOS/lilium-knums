use io::hdl;
use types::hdl;
use types::int;
use types::uuid;
use types::sysresult;



struct PollInfo {
    hdl: *handle IOHandle,
    read_bytes: ulong,
    status: SysResult,
}

/// Reads up to `len` bytes from the given
fn IORead(hdl: *handle IOHandle, buf: *mut void, len: ulong) -> SysResult = 0;
fn IOWrite(hdl: *handle IOHandle, buf: *const void, len: ulong) -> SysResult = 1;
fn IOSeek(hdl: *handle IOHandle, from: u32, offset: i64) -> SysResult = 2;
fn IOSeekFar(
    hdl: *handle IOHandle,
    from: u32,
    offset: i128,
    abs_off: *mut u128,
) -> SysResult = 3;

/// Copies a number of bytes from `src_hdl` to `dest_hdl`, without an intermediate return to userspace
/// This is intended to bemore efficient than performing individual `IORead` and `IOWrite` calls.
///
/// Blocking Behaviour:
/// * If either handle is `MODE_NONBLOCKING` and either operation would block, then `WOULDBLOCK` is returned
/// * If both `src_hdl` and `dest_hdl` are configured `MODE_ASYNC` and either operation would block, then PENDING is returned, and the behaviour follows standard async I/O rules
/// * Otherwise, the syscall blocks.
fn IOCopy(
    src_hdl: *handle IOHandle,
    dest_hdl: *handle IOHandle,
    len: ulong,
) -> SysResult = 4;

/// Copies all available data from src_hdl to dest_hdl
/// This is the same as an `IOCopy` between the handles with an arbitrarily large length, except:
/// * If both src and dest are pipes, if dest has a larger or same-size buffer than src, then the operation is atomic
/// * If dest is a socket, and either src is a datagram socket or a pipe, then the next block that is available (up to the minimum of the src buffer size and the dest packet size)
///    is written as a single unit (this is important if `dest` is a datagram socket)
/// * Likewise, if `dest` is a pipe, and src is a datagram socket, the next datagram recieved, up to the dest buffer size, is written as a single unit.
///    If the datagram exceeds the buffer size, it is split.
///
/// The length of the operation transfered is stored in `size`.
fn IOCopyFull(
    src_hdl: *handle IOHandle,
    dest_hdl: *handle IOHandle,
    size: *mut u128,
) -> SysResult = 5;

/// Reads from the stream backed by `hdl` into `buf`, starting from `file_base`.
/// `hdl` must be [`CHAR_SEEKABLE`].
/// If `hdl` is [`CHAR_RANDOMACCESS`], the seek position is not modified by this syscall. Otherwise the seek position is unspecified (after the syscall)
///
/// Returns the number of bytes read, or `0` if `file_base` is out of bounds for the file
/// ## Errors
/// Same errors as [`IORead`] and:
/// * if `hdl` is not [`CHAR_SEEKABLE`] returns `UNSUPPORTED_OPERATION`
fn IOReadRA(
    hdl: *handle IOHandle,
    buf: *mut void,
    len: ulong,
    file_base: u64,
) -> SysResult = 5;
/// Writes to the stream backed by `hdl` from `buf`, starting from `file_base`.
/// `hdl` must be [`CHAR_SEEKABLE`].
/// If `hdl` is [`CHAR_RANDOMACCESS`], the seek position is not modified by this syscall. Otherwise the seek position is unspecified (after the syscall)
///
/// Returns the number of bytes read, or `0` if `file_base` is out of bounds for the file
/// ## Errors
/// Same errors as [`IORead`] and:
/// * if `hdl` is not [`CHAR_SEEKABLE`] returns `UNSUPPORTED_OPERATION`
fn IOWriteRA(
    hdl: *handle IOHandle,
    buf: *const void,
    len: ulong,
    file_base: u64,
) -> SysResult = 6;

fn GetIOCharacteristics(hdl: *handle IOHandle) -> SysResult = 7;

fn SetIOBlockingMode(hdl: *handle IOHandle, mode: u32) -> SysResult = 8;
fn SetIONotifyMode(hdl: *handle IOHandle, notif_flags: u32) -> SysResult = 9;
fn SetIONotifyAddr(hdl: *handle IOHandle, addr: *mut void) -> SysResult = 10;

fn IOPoll(hdl: *handle IOHandle, read_len: *mut ulong) -> SysResult = 11;
fn IOPollAll(poll_array: *mut PollInfo, poll_array_len: ulong) -> SysResult = 12;
fn IOAbort(hdl: *handle IOHandle) -> SysResult = 13;
fn IOJoin(hdl: *handle IOHandle) -> SysResult = 14;
fn IOJoinAll(join_array: *mut PollInfo, join_array_len: ulong) -> SysResult = 15;
fn IOPause(hdl: *handle IOHandle) -> SysResult = 16;
fn IOResume(hdl: *handle IOHandle) -> SysResult = 17;
/// When an async I/O Operation completes on `hdl`, atomically writes the length to `len` and notifies it as though by [`NotifyAddress`][crate::sys::thread::NotifyAddress].
/// len must obey the constraints set by `NotifyAddress`
/// The `notify_mask` is set to `0` (notifies all threads)
/// # Errors
/// If `hdl` is not a valid handle, returns `INVALID_HANDLE``.
///
/// Returns an error if `len` would be invalid for `NotifyAddress`
fn IONotify(hdl: *handle IOHandle, len: *mut ulong) -> SysResult = 18;

/// Restarts a blocking I/O Operation that was interupted or timed out.
fn IORestart(hdl: *handle IOHandle) -> SysResult = 19;