
use types;
use io::hdl;

struct MapExtendedAttrBacking : option(U{294d5c4e-cdf4-53b3-bfbc-ed804526394b}) {
    stream_base: u64,
    backing_file: *handle IOHandle    
}

struct MapExtendedAttrName : option(U{90ded1b2-ba85-5d34-90b4-74e717444863}) {
    mapping_name: KStrCPtr,
}

struct MapExtendedAttrAllowWritableText : option(U{95aab67a-3ed4-5ce9-9a49-3a0be444cabc}) {
    /// Must be set to exactly 9161d4b4-3013-55cf-8e03-3431bbff9bcc (`unsafe { AllowWritableText }`)
    /// Note that a named constant is not provided 
    cookie: Uuid,
}

union MapExtendedAttr : option_body(64) {
    backing: MapExtendedAttrBacking,
    name: MapExtendedAttrName,
}

/// Creates a Readable mapping.
///
/// Generally, a non-readable mapping cannot be created (without setting [`MAP_ATTR_RESERVE`]).
/// The exception is that some architectures may permit write-only or execute-only pages.
const MAP_ATTR_READ: u32 = 0x01;
///
const MAP_ATTR_WRITE: u32 = 0x02;
const MAP_ATTR_EXEC: u32 = 0x04;
const MAP_ATTR_THREAD_PRIVATE: u32 = 0x08;
const MAP_ATTR_PROC_PRIVATE: u32 = 0x10;
/// Reserves (but does not allocate new physical memory or swap for) the mapping region.
/// This allows you to preallocate a region of memory without consuming either proper memory or the security context memory resource limit (beyond memory consumed for kernel-level data structures), until actually needed.
///
///
/// Regardless of [`MAP_ATTR_READ`], [`MAP_ATTR_WRITE`], or [`MAP_ATTR_EXEC`], accesses to this region will fault (and generally terminate execution unless the program has arranged to handle the exception)
///
/// Like any other mapping, a mapping created with [`CreateMapping`] using [`MAP_ATTR_RESERVE`] will be an invalid region for other calls to [`CreateMapping`].
/// To make use of part of the reserved region, use [`ChangeMappingAttributes`] on the relevant part.
///
/// [`MAP_ATTR_RESERVE`] cannot be used with [`MAP_KIND_ENCRYPTED`].
const MAP_ATTR_RESERVE: u32 = 0x20;

const MAP_KIND_NORMAL: u32 = 0;
const MAP_KIND_RESIDENT: u32 = 1;
const MAP_KIND_SECURE: u32 = 2;
const MAP_KIND_ENCRYPTED: u32 = 3;

fn CreateMapping(base_addr: *mut *mut void, page_count: ilong, map_attrs: u32, map_kind: u32, map_ext: *const KCSlice<MapExtendedAttr>)  -> SysResult = 0x30;

fn ChangeMappingAttributes(mapping_base_addr: *mut void, page_count: ilong, new_map_attrs: u32, map_ext:  *const KCSlice<MapExtendedAttr>)  -> SysResult = 0x31;

fn RemoveMapping(mapping_base_addr: *mut void, page_count: ilong) -> SysResult = 0x32;

 fn ResizeMapping(
    mapping_base_addr: *mut void,
    old_page_count: ilong,
    new_base_addr: *mut *mut void,
    new_page_count: ilong,
) -> SysResult = 0x33;